version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  market-data-producer:
    build: .
    container_name: market-data-producer
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    environment:
      KAFKA_SERVERS: kafka:29092
      TOPIC_NAME: market_data
      CSV_FILE: l1_day.csv  # Use sample for quick testing, change to l1_day.csv for full dataset
    command: ["./entrypoint.sh"]
    restart: unless-stopped

  smart-order-router:
    build: .
    container_name: smart-order-router
    depends_on:
      kafka:
        condition: service_healthy
      market-data-producer:
        condition: service_started
    volumes:
      - .:/app
    working_dir: /app
    environment:
      KAFKA_SERVERS: kafka:29092
      TOPIC_NAME: market_data
      ORDER_SIZE: 5000
      LAMBDA_OVER: 0.01
      LAMBDA_UNDER: 0.005
      THETA_QUEUE: 0.002
      STEP: 100
      GREEDY_L2: "false"  # Set to "true" for greedy L2 allocation
    entrypoint: ["./entrypoint_sor.sh"]
    restart: unless-stopped

  # Alternative SOR service using greedy L2 algorithm
  smart-order-router-l2:
    build: .
    container_name: smart-order-router-l2
    depends_on:
      kafka:
        condition: service_healthy
      market-data-producer:
        condition: service_started
    volumes:
      - .:/app
    working_dir: /app
    environment:
      KAFKA_SERVERS: kafka:29092
      TOPIC_NAME: market_data
      ORDER_SIZE: 3000
      LAMBDA_OVER: 0.015
      LAMBDA_UNDER: 0.008
      THETA_QUEUE: 0.003
      GREEDY_L2: "true"
    entrypoint: ["./entrypoint_sor.sh"]
    profiles: ["l2"]  # Use with: docker-compose --profile l2 up
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  # SOR Benchmark System - Runs parameter optimization and baseline comparison
  sor-benchmark:
    build: .
    container_name: sor-benchmark
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    environment:
      KAFKA_SERVERS: kafka:29092
      CSV_FILE: l1_day.csv
      TOPIC_NAME: mock_l1_stream
      ORDER_SIZE: 5000
    entrypoint: ["./entrypoint_benchmark.sh"]
    profiles: ["benchmark"]  # Use with: docker compose --profile benchmark up
    restart: "no"  # Run once and stop

volumes:
  kafka_data:
  zookeeper_data: 